{"last_node_id":80,"last_link_id":178,"nodes":[{"id":80,"type":"LoadImage","pos":[1140,75],"size":[390,465],"flags":{},"order":0,"mode":0,"inputs":[],"outputs":[{"name":"IMAGE","type":"IMAGE","links":[178]},{"name":"MASK","type":"MASK","links":null}],"properties":{"Node name for S&R":"LoadImage"},"widgets_values":["0000000000000000000example.png","image"]},{"id":79,"type":"Exec Python Code Script","pos":[1605,45],"size":[765,780],"flags":{},"order":1,"mode":0,"inputs":[{"name":"image1","type":"IMAGE","link":178,"shape":7},{"name":"image2","type":"IMAGE","link":null,"shape":7},{"name":"mask1","type":"MASK","link":null,"shape":7},{"name":"mask2","type":"MASK","link":null,"shape":7},{"name":"list1","type":"*","link":null,"shape":7},{"name":"dict1","type":"*","link":null,"shape":7},{"name":"any1","type":"*","link":null,"shape":7},{"name":"any2","type":"*","link":null,"shape":7},{"name":"any3","type":"*","link":null,"shape":7},{"name":"any4","type":"*","link":null,"shape":7}],"outputs":[{"name":"image1","type":"*","links":null},{"name":"image2","type":"*","links":null},{"name":"mask1","type":"*","links":null},{"name":"mask2","type":"*","links":null},{"name":"number1","type":"*","links":null},{"name":"number2","type":"*","links":null},{"name":"text1","type":"*","links":null},{"name":"text2","type":"*","links":null},{"name":"list1","type":"*","links":null},{"name":"dict1","type":"*","links":null},{"name":"any1","type":"*","links":null},{"name":"any2","type":"*","links":null},{"name":"any3","type":"*","links":null},{"name":"any4","type":"*","links":null}],"properties":{},"widgets_values":["from sklearn.cluster import KMeans\nimport webcolors\n\n\ndef get_colors(image):\n    pixels = image.view(-1, image.shape[-1]).numpy()  # torch already imported\n    colors = KMeans(n_clusters=5).fit(pixels).cluster_centers_ * 255\n    return colors\n\ndef get_complementary_colors(main_colors):\n    ret = []\n    for colors in main_colors:\n        ret.append([(255 - colors[i]) % 256 for i in range(3)])\n    return ret\n    \ndef get_color_names(color_list):\n    import webcolors\n    colors = []\n    for color in color_list:\n        rgb = (int(color[0]), int(color[1]), int(color[2]))\n        c, min_d = None, float(\"inf\")\n        for name, color in webcolors.CSS3_HEX_TO_NAMES.items():\n            distance = sum(abs(a - b) for a, b in zip(rgb, webcolors.hex_to_rgb(name)))\n            if distance < min_d:\n                min_d, c = distance, name\n        colors.append(webcolors.CSS3_HEX_TO_NAMES[c])\n    return \", \".join(colors[:-1]) + \" and \" + colors[-1]\n\ncolors = get_colors(image1)\ncomplementary_colors = get_complementary_colors(colors)\ncolors = get_color_names(colors)\ncomplementary_colors = get_color_names(complementary_colors)\n\nprint(f\"Main color palette: {colors}\")\nprint(f\"Complementary color palette: {complementary_colors}\")",0,0,"hello","world",true,"from sklearn.cluster import KMeans\nimport webcolors\n\n\ndef get_colors(image):\n    pixels = image.view(-1, image.shape[-1]).numpy()  # torch already imported\n    colors = KMeans(n_clusters=5).fit(pixels).cluster_centers_ * 255\n    return colors\n\ndef get_complementary_colors(main_colors):\n    ret = []\n    for colors in main_colors:\n        ret.append([(255 - colors[i]) % 256 for i in range(3)])\n    return ret\n    \ndef get_color_names(color_list):\n    import webcolors\n    colors = []\n    for color in color_list:\n        rgb = (int(color[0]), int(color[1]), int(color[2]))\n        c, min_d = None, float(\"inf\")\n        for name, color in webcolors.CSS3_HEX_TO_NAMES.items():\n            distance = sum(abs(a - b) for a, b in zip(rgb, webcolors.hex_to_rgb(name)))\n            if distance < min_d:\n                min_d, c = distance, name\n        colors.append(webcolors.CSS3_HEX_TO_NAMES[c])\n    return \", \".join(colors[:-1]) + \" and \" + colors[-1]\n\ncolors = get_colors(image1)\ncomplementary_colors = get_complementary_colors(colors)\ncolors = get_color_names(colors)\ncomplementary_colors = get_color_names(complementary_colors)\n\nprint(f\"Main color palette: {colors}\")\nprint(f\"Complementary color palette: {complementary_colors}\")","Output:\nMain color palette: lightgreen, cornflowerblue, beige, khaki and lightpink\nComplementary color palette: darkmagenta, olive, black, darkblue and darkgreen\n"]}],"links":[[178,80,0,79,0,"IMAGE"]],"groups":[],"config":{},"extra":{"ds":{"scale":0.7050000000000001,"offset":[-525.1052117701429,209.99557856388253]},"node_versions":{"comfy-core":"v0.3.10-33-g7da85fa","python-interpreter-node":"ac2547ada25643be7cfe4b8030e57059c9da5bd7"},"VHS_latentpreview":false,"VHS_latentpreviewrate":0},"version":0.4}